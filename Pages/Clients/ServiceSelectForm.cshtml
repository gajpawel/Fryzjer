@page "{id:int}"
@model Fryzjer.Pages.Clients.ServiceSelectFormModel
@using Fryzjer.Models
@inject IWebHostEnvironment Environment

@{
    ViewData["Title"] = "Wybór fryzjera i usług";
}

<h2 class="mb-4">Rezerwacja wizyty w salonie @Model.PlaceName</h2>

@if (Model.HairdresserNames != null && Model.HairdresserNames.Any())
{
    <form method="post" class="shadow p-4 bg-white rounded">
        <div class="form-group mb-3">
            <label for="HairdresserId" class="form-label">Wybierz fryzjera:</label>
            <select id="HairdresserId" asp-for="SelectedHairdresserName" class="form-control">
                <option value="" disabled selected>-- Wybierz fryzjera --</option>
                @foreach (var hairdresser in Model.HairdresserNames)
                {
                    <option value="@hairdresser">@hairdresser</option>
                }
            </select>
        </div>

        <div class="form-group mb-3">
            <label for="ServiceId" class="form-label">Wybrana usługa:</label>
            <div class="border p-3 bg-light rounded">
                <p class="mb-0">Usługa: <strong>@ViewData["ServiceName"]</strong></p>
                <p class="mb-0">Czas trwania: <strong>@ViewData["ServiceDuration"]</strong></p>
            </div>
        </div>


        <button type="submit" class="btn btn-primary w-100">Wybierz fryzjera</button>
    </form>
}
else
{
    <p class="text-muted">@ViewData["Message"]</p>
}

@if (!string.IsNullOrEmpty(Model.SelectedHairdresserName))
{
    <hr class="my-4" />

    <!-- Harmonogram tygodnia -->

    <h3 class="mb-3">Harmonogram tygodnia dla fryzjera: @ViewData["SelectedHairdresserName"]</h3>

    <div>
        @for (int weekIndex = 0; weekIndex < 2; weekIndex++)
        {
            var weeklySchedule = weekIndex == 0 ? Model.WeeklySchedule1 : Model.WeeklySchedule2;

            <div class="row text-center mb-5">
                @foreach (var day in weeklySchedule)
                {
                    <div class="col-md-2 border bg-light mx-2 p-3 rounded">
                        <h5 class="mb-2">@day.Date.ToString("dddd, dd-MM-yyyy")</h5>
                        <ul class="list-unstyled mb-0">
                            @if (day.Date < DateTime.Now.Date)
                            {
                                <li class="text-muted">Brak dostępnych terminów</li>
                            }
                            else
                            {
                                var startTime = new TimeSpan(8, 0, 0); // Start o 08:00
                                var endTime = new TimeSpan(18, 0, 0); // Koniec o 18:00

                                foreach (var block in day.TimeBlocks)
                                {
                                    // Wyświetlanie wolnych godzin przed zarezerwowanym blokiem
                                    while (startTime < block.StartTime)
                                    {
                                        <li>
                                            <button class="btn btn-sm btn-success time-slot mb-2 w-100"
                                                    data-hour="@startTime.ToString(@"hh\:mm")"
                                                    data-date="@day.Date.ToString("yyyy-MM-dd")"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#reservationModal">
                                                @startTime.ToString(@"hh\:mm")
                                            </button>
                                        </li>
                                        startTime = startTime.Add(new TimeSpan(0, 15, 0));
                                    }

                                    // Wyświetlanie zarezerwowanego bloku
                                    <li>
                                        <button class="btn btn-sm btn-danger mb-2 w-100 reserved-time-slot"
                                                data-reservation-id="@block.ReservationId"
                                                data-bs-toggle="modal"
                                                data-bs-target="#deleteReservationModal">
                                            @block.TimeRange<br />
                                            @Html.Raw(block.ClientInfo.Replace("\n", "<br />"))<br />
                                            @block.ServiceName
                                        </button>
                                    </li>

                                    startTime = block.EndTime;
                                }

                                // Wyświetlanie wolnych godzin po ostatnim zarezerwowanym bloku
                                while (startTime < endTime)
                                {
                                    <li>
                                        <button class="btn btn-sm btn-success time-slot mb-2 w-100"
                                                data-hour="@startTime.ToString(@"hh\:mm")"
                                                data-date="@day.Date.ToString("yyyy-MM-dd")"
                                                data-bs-toggle="modal"
                                                data-bs-target="#reservationModal">
                                            @startTime.ToString(@"hh\:mm")
                                        </button>
                                    </li>
                                    startTime = startTime.Add(new TimeSpan(0, 15, 0));
                                }
                            }
                        </ul>
                    </div>
                }
            </div>
        }
    </div>
}


<!-- Modal do potwierdzenia rezerwacji -->
<div class="modal fade" id="reservationModal" tabindex="-1" aria-labelledby="reservationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reservationModalLabel">Potwierdzenie rezerwacji</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Czy na pewno chcesz zarezerwować godzinę <strong id="modalHour">10:30</strong> w dniu <strong id="modalDate">2025-01-15</strong>?</p>
                <form id="reservationForm" method="post">
                    <input type="hidden" name="Date" id="inputDate" /> <!-- Ukryte pole na datę -->
                    <input type="hidden" name="Time" id="inputTime" /> <!-- Ukryte pole na godzinę rozpoczęcia -->
                    <input type="hidden" name="EndTime" id="inputEndTime" /> <!-- Ukryte pole na godzinę zakończenia -->
                    <input type="hidden" name="ServiceId" id="inputServiceId" value="@ViewData["ServiceId"]" /> <!-- Przekazanie ID usługi -->
                    <input type="hidden" name="SelectedHairdresserId" id="inputHairdresserId" value="@Model.SelectedHairdresserId" /> <!-- Przekazanie ID fryzjera -->
                    <input type="hidden" name="ClientId" id="inputClientId" value="@HttpContext.Session.GetInt32("ClientId")" /> <!-- Przekazanie ID klienta -->
                    <input type="hidden" id="serviceDuration" value="@ViewData["ServiceDuration"]" />
                    <button type="submit" class="btn btn-primary" id="confirmReservation">Tak, zarezerwuj</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                </form>
            </div>
        </div>
    </div>
</div>




<script>
   
    document.addEventListener('DOMContentLoaded', function () {
        
        const timeSlots = document.querySelectorAll('.time-slot');
        timeSlots.forEach(slot => {
            slot.addEventListener('click', function () {
                const selectedHour = this.getAttribute('data-hour');
                const selectedDate = this.getAttribute('data-date');

                // Aktualizacja modalu
                document.getElementById('modalHour').textContent = selectedHour;
                document.getElementById('modalDate').textContent = selectedDate;
                document.getElementById('inputDate').value = selectedDate;
                document.getElementById('inputTime').value = selectedHour;

                // Obliczanie czasu zakończenia
                const serviceDuration = document.getElementById('serviceDuration').value || '00:30';
                const [hours, minutes] = serviceDuration.split(':').map(Number);
                const durationInMinutes = (hours * 60) + minutes;

                const startDateTime = new Date(`${selectedDate}T${selectedHour}`);
                const endDateTime = new Date(startDateTime.getTime() + durationInMinutes * 60000);
                const endTime = endDateTime.toTimeString().slice(0, 5);

                document.getElementById('inputEndTime').value = endTime;
            });
        });


        const reservationForm = document.getElementById('reservationForm');
        reservationForm.addEventListener('submit', async function (e) {
            e.preventDefault(); // Zapobiega standardowemu wysłaniu formularza


            const serviceDuration = document.getElementById('serviceDuration').value;
            const [hours, minutes] = serviceDuration.split(':').map(Number);
            const durationInMinutes = (hours * 60) + minutes;

            // Pobierz wszystkie potrzebne dane
            const reservationData = {
                clientId: parseInt(document.getElementById('inputClientId').value),
                date: document.getElementById('inputDate').value,
                time: timeToMinutes(document.getElementById('inputTime').value),
                endTime: document.getElementById('inputEndTime').value,
                serviceId: parseInt(document.getElementById('inputServiceId').value),
                hairdresserId: parseInt(document.getElementById('inputHairdresserId').value),
               serviceDuration: durationInMinutes,
                status: "O"
            };

            try {
                const response = await fetch('/api/ClientReservation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(reservationData)
                });

                if (response.ok) {
                    alert('Rezerwacja została pomyślnie zapisana!');
                    window.location.href = '/Clients/ClientProfile';
                } else {
                    const errorText = await response.text();
                    alert('Błąd podczas zapisywania rezerwacji: ' + errorText);
                }
            } catch (error) {
                alert('Wystąpił błąd podczas komunikacji z serwerem: ' + error.message);
            }
        });

        // Funkcja pomocnicza do konwersji czasu na minuty
        function timeToMinutes(timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            return hours * 60 + minutes;
        }
    });
    </script>