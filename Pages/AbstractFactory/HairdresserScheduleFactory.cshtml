@page
@model Fryzjer.Pages.AbstractFactory.HairdresserScheduleFactoryModel
@{
    ViewData["Title"] = "Panel fryzjera";
}

<div class="container mt-4">
    <h1 class="text-center mb-4">Harmonogram</h1>

    <div class="text-end mb-3">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#vacationModal">
            Wniosek o urlop
        </button>
        <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#historyModal">
            Historia urlopów
        </button>
    </div>

    <div class="d-flex justify-content-between mb-3">
        <a href="?week=@(Model.CurrentWeek - 1)" class="btn btn-outline-primary">Poprzedni tydzień</a>
        <a href="?week=@(Model.CurrentWeek + 1)" class="btn btn-outline-primary">Następny tydzień</a>
    </div>

    @for (int weekIndex = 0; weekIndex < 2; weekIndex++)
    {
        var weeklySchedule = (weekIndex == 0) ? Model.WeeklySchedule1 : Model.WeeklySchedule2;

        <div class="row text-center mb-5">
            @foreach (var day in weeklySchedule)
            {
                <div class="col-md-2 border bg-light mx-2 p-2">
                    <h5>@day.Date.ToString("dddd, dd-MM-yyyy")</h5>
                    <ul class="list-unstyled">
                        @{
                            var startTime = new TimeSpan(8, 0, 0);
                            var endTime = new TimeSpan(18, 0, 0);
                            var currentDateTime = DateTime.Now;

                            foreach (var block in day.TimeBlocks)
                            {
                                // Wstaw wolne sloty przed tym blokiem
                                while (startTime < block.StartTime)
                                {
                                    var slotDateTime = day.Date.Add(startTime);
                                    
                                    @if (slotDateTime > currentDateTime)
                                    {
                                        <li>
                                            <button class="btn btn-sm btn-success time-slot mb-2"
                                                    data-hour="@($"{startTime.Hours:D2}:{startTime.Minutes:D2}")"
                                                    data-date="@day.Date.ToString("yyyy-MM-dd")"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#reservationModal">
                                                @($"{startTime.Hours:D2}:{startTime.Minutes:D2}")
                                            </button>
                                        </li>
                                    }
                                    else
                                    {
                                        <li>
                                            <div class="btn btn-sm btn-secondary mb-2 disabled">
                                                @($"{startTime.Hours:D2}:{startTime.Minutes:D2}")
                                            </div>
                                        </li>
                                    }

                                    startTime = startTime.Add(TimeSpan.FromMinutes(15));
                                }
                                // Przyciski bloków (rezerwacja/urlop)
                                <li>
                                    @if (string.IsNullOrEmpty(block.Modal))
                                    {
                                        <div class="btn btn-sm mb-2 @block.BlockClass">
                                            @block.TimeRange<br />
                                            @Html.Raw(block.ClientInfo?.Replace("\n", "<br />"))<br />
                                            @block.ServiceName
                                        </div>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm mb-2 @block.BlockClass"
                                                data-reservation-id="@block.ReservationId"
                                                data-bs-toggle="modal"
                                                data-bs-target="@block.Modal">
                                            @block.TimeRange<br />
                                            @Html.Raw(block.ClientInfo?.Replace("\n", "<br />"))<br />
                                            @block.ServiceName<br />
                                            @if (block.Modal == "#manageReservationModal"
                                       || (block.ServiceName.ToLower() == "urlop" && block.Status == 'O'))
                                            {
                                                <b>Oczekuje na akceptację</b>
                                            }
                                        </button>
                                    }
                                </li>

                                startTime = block.EndTime;
                            }

                            // Wstaw wolne sloty po ostatnim bloku
                            while (startTime < endTime)
                            {
                                var slotDateTime = day.Date.Add(startTime);

                                @if (slotDateTime > currentDateTime)
                                {
                                    <li>
                                        <button class="btn btn-sm btn-success time-slot mb-2"
                                                data-hour="@($"{startTime.Hours:D2}:{startTime.Minutes:D2}")"
                                                data-date="@day.Date.ToString("yyyy-MM-dd")"
                                                data-bs-toggle="modal"
                                                data-bs-target="#reservationModal">
                                            @($"{startTime.Hours:D2}:{startTime.Minutes:D2}")
                                        </button>
                                    </li>
                                }
                                else
                                {
                                    <li>
                                        <div class="btn btn-sm btn-secondary mb-2 disabled">
                                            @($"{startTime.Hours:D2}:{startTime.Minutes:D2}")
                                        </div>
                                    </li>
                                }

                                startTime = startTime.Add(TimeSpan.FromMinutes(15));
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    }
</div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<!-- ============================
     Modal REZERWACJI USŁUGI
============================ -->
<div class="modal fade" id="reservationModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rezerwacja terminu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="reservationForm">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="clientLogin" class="form-label">Login klienta (opcjonalnie)</label>
                        <input type="text" class="form-control" id="clientLogin">
                    </div>
                    <div class="mb-3">
                        <label for="clientName" class="form-label">Imię</label>
                        <input type="text" class="form-control" id="clientName" required>
                    </div>
                    <div class="mb-3">
                        <label for="clientSurname" class="form-label">Nazwisko</label>
                        <input type="text" class="form-control" id="clientSurname" required>
                    </div>
                    <div class="mb-3">
                        <label for="clientPhone" class="form-label">Telefon</label>
                        <input type="text" class="form-control" id="clientPhone" required>
                    </div>
                    <div class="mb-3">
                        <label for="clientGender" class="form-label">Płeć</label>
                        <select class="form-control" id="clientGender" required>
                            <option value="M">Mężczyzna</option>
                            <option value="K">Kobieta</option>
                            <option value="N">Inne</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="service" class="form-label">Usługa</label>
                        <select class="form-control" id="service" required>
                            @foreach (var service in Model.Services.Where(s => s.Name.ToLower() != "urlop"))
                            {
                                <option value="@service.Id" data-duration="@service.Duration">
                                    @service.Name
                                </option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="reservationStart" class="form-label">Godzina rozpoczęcia</label>
                        <input type="text" class="form-control" id="reservationStart" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="reservationEnd" class="form-label">Godzina zakończenia</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="reservationEnd" readonly />
                            <button type="button" class="btn btn-secondary" id="changeEndTime">Zmień</button>
                        </div>
                    </div>
                    <input type="hidden" id="reservationDate" />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-primary" id="saveReservation">Zarezerwuj</button>
            </div>
        </div>
    </div>
</div>

<!-- ============================
     Modal ZARZĄDZANIA REZERWACJĄ
============================ -->
<div class="modal fade" id="manageReservationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rezerwacja oczekująca</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Co chcesz zrobić z tą rezerwacją?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Powrót</button>
                <form method="post" asp-page-handler="DeleteReservation" style="display:inline;">
                    <input type="hidden" name="reservationId" id="deleteManageReservationId" />
                    <button type="submit" class="btn btn-danger">Usuń</button>
                </form>
                <form method="post" asp-page-handler="ConfirmReservation" style="display:inline;">
                    <input type="hidden" name="reservationId" id="confirmReservationId" />
                    <button type="submit" class="btn btn-success">Zaakceptuj</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- ============================
     Modal POTWIERDZENIA ANULACJI
============================ -->
<div class="modal fade" id="deleteReservationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Potwierdź anulowanie</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Czy na pewno chcesz anulować tę rezerwację?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Nie</button>
                <form method="post" asp-page-handler="DeleteReservation" style="display:inline;">
                    <input type="hidden" name="reservationId" id="deleteReservationId" />
                    <button type="submit" class="btn btn-danger">Tak</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- ============================
     Modal WNIOSKU URLOPU
============================ -->
<div class="modal fade" id="vacationModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Wniosek o urlop</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="vacationForm">
                    @Html.AntiForgeryToken()

                    <!-- Wybór: cały dzień czy custom -->
                    <div class="mb-3">
                        <label for="vacationType" class="form-label">Typ urlopu</label>
                        <select class="form-control" id="vacationType" required>
                            <option value="fullDay">Cały dzień (08:00-18:00)</option>
                            <option value="customPeriod">Własny przedział godzin</option>
                        </select>
                    </div>

                    <!-- Zakres dat (wielodniowy) -->
                    <div class="mb-3 row">
                        <div class="col">
                            <label for="vacationStartDate" class="form-label">Od dnia</label>
                            <input type="date" class="form-control" id="vacationStartDate"
                                   required min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                        </div>
                        <div class="col">
                            <label for="vacationEndDate" class="form-label">Do dnia</label>
                            <input type="date" class="form-control" id="vacationEndDate"
                                   required min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                        </div>
                    </div>

                    <!-- Godziny (tylko jak custom) -->
                    <div id="timeSelectionContainer" style="display: none;">
                        <div class="mb-3 row">
                            <div class="col">
                                <label for="startTime" class="form-label">Od godziny</label>
                                <input type="time" class="form-control" id="startTime"
                                       min="08:00" max="17:45" step="900">
                            </div>
                            <div class="col">
                                <label for="endTime" class="form-label">Do godziny</label>
                                <input type="time" class="form-control" id="endTime"
                                       min="08:15" max="18:00" step="900">
                            </div>
                        </div>
                    </div>
                </form>
                <div class="text-muted">
                    * Po zatwierdzeniu wszystkie sloty w wybranym zakresie będą oznaczone jako urlop.
                    Jeśli istnieje już urlop w tym czasie (O/P), wniosek może zostać odrzucony lub scalony.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
                <button type="button" class="btn btn-primary" id="submitVacation">Wyślij wniosek</button>
            </div>
        </div>
    </div>
</div>

<!-- ============================
     Modal HISTORII URLOPÓW
============================ -->
<div class="modal fade" id="historyModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Historia urlopów</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Data</th>
                            <th>Godziny</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="vacationHistory">
                        @foreach (var vac in Model.VacationHistory)
                        {
                            <tr>
                                <td>@vac.date</td>
                                <td>@vac.startTime - @vac.endTime</td>
                                <td>@Model.GetStatusText(vac.status)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

<!-- ============================
     Modal ZARZĄDZANIA URLOPEM
============================ -->
<div class="modal fade" id="manageVacationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Urlop oczekujący</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Możesz wycofać (anulować) wniosek urlopowy.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Powrót</button>
                <form method="post" asp-page-handler="DeleteReservation" style="display:inline;">
                    <input type="hidden" name="reservationId" id="deleteVacationReservationId" />
                    <button type="submit" class="btn btn-danger">Anuluj wniosek</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .time-column {
        width: 100px;
        font-weight: bold;
    }

    .schedule-table td {
        padding: 5px;
        vertical-align: middle;
        height: 60px;
    }

    .reservation-info {
        font-size: 0.9em;
        text-align: center;
    }

    /* Urlopy */
    .vacation-o {
        background-color: #e6e6fa; /* jasny fiolet (lavender) */
        color: #333;
    }

    .vacation-p {
        background-color: #98FB98; /* jasny zielony (pale green) */
        color: #333;
    }

    .vacation-z {
        background-color: #4682B4; /* ciemniejszy niebieski (steel blue) */
        color: white; /* biały tekst dla lepszej czytelności na ciemnym tle */
    }

    /* Zwykłe rezerwacje */
    .reserved {
        background-color: #ffc0cb; /* różowe dla zaakceptowanych */
        color: #333;
    }

    .pending {
        background-color: #fff3cd; /* żółte dla oczekujących */
        color: #333;
    }

    .completed {
        background-color: #cce5ff; /* jasny niebieski dla zakończonych */
        color: #333;
    }
</style>

@section Scripts {
    <script>
        // ===========================================
        // AUTOUZUPEŁNIANIE DANYCH KLIENTA (opcjonalne)
        // ===========================================
        document.getElementById('clientLogin')?.addEventListener('blur', async () => {
            const login = document.getElementById('clientLogin').value;
            const genderSelect = document.getElementById('clientGender');

            if (!login) {
                document.getElementById('clientName').value = '';
                document.getElementById('clientSurname').value = '';
                document.getElementById('clientPhone').value = '';
                genderSelect.value = 'M';
                return;
            }

            try {
                const response = await fetch(`/api/client?login=${encodeURIComponent(login)}`);
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('clientName').value = data.name;
                    document.getElementById('clientSurname').value = data.surname;
                    document.getElementById('clientPhone').value = data.phone;
                    if (data.gender) {
                        const g = data.gender.toUpperCase();
                        if (['M','K','N'].includes(g)) {
                            genderSelect.value = g;
                        }
                    }
                } else {
                    alert('Nie znaleziono klienta o tym loginie.');
                    document.getElementById('clientLogin').value = '';
                    document.getElementById('clientName').value = '';
                    document.getElementById('clientSurname').value = '';
                    document.getElementById('clientPhone').value = '';
                    genderSelect.value = 'M';
                }
            } catch (err) {
                alert('Błąd podczas pobierania danych klienta: ' + err);
            }
        });

        // ===========================================
        // WYBÓR SLOTA CZASOWEGO W HARMONOGRAMIE
        // ===========================================
        let selectedDate, selectedHour;
        document.querySelectorAll('.time-slot').forEach(slotBtn => {
            slotBtn.addEventListener('click', () => {
                selectedDate = slotBtn.getAttribute('data-date');
                selectedHour = slotBtn.getAttribute('data-hour');

                document.getElementById('reservationDate').value = selectedDate;
                document.getElementById('reservationStart').value = selectedHour;

                const serviceSelect = document.getElementById('service');
                const reservationEnd = document.getElementById('reservationEnd');

                const updateEndTime = () => {
                    const durationString =
                        serviceSelect.options[serviceSelect.selectedIndex].dataset.duration;
                    const [dh, dm] = durationString.split(':').map(Number);
                    const durationInMinutes = dh * 60 + dm;

                    const [h, m] = selectedHour.split(':').map(Number);
                    const totalMinutes = h*60 + m + durationInMinutes;
                    const endH = Math.floor(totalMinutes/60);
                    const endM = totalMinutes % 60;
                    reservationEnd.value =
                        `${String(endH).padStart(2,'0')}:${String(endM).padStart(2,'0')}`;
                };

                serviceSelect.removeEventListener('change', updateEndTime);
                serviceSelect.addEventListener('change', updateEndTime);
                updateEndTime();
            });
        });

        // ===========================================
        // PRZYCISK "Zmień" GODZINY ZAKOŃCZENIA
        // ===========================================
        document.getElementById('changeEndTime')?.addEventListener('click', () => {
            const endTimeInput = document.getElementById('reservationEnd');
            const [hours, minutes] = endTimeInput.value.split(':').map(Number);

            const selectEndTime = document.createElement('select');
            selectEndTime.className = 'form-control';

            let time = new Date();
            time.setHours(hours, minutes);
            const endOfDay = new Date();
            endOfDay.setHours(18, 0);

            while (time <= endOfDay) {
                const hh = String(time.getHours()).padStart(2,'0');
                const mm = String(time.getMinutes()).padStart(2,'0');
                const value = hh + ":" + mm;
                const option = document.createElement('option');
                option.value = value;
                option.text = value;
                if (value === endTimeInput.value) {
                    option.selected = true;
                }
                selectEndTime.appendChild(option);
                time.setMinutes(time.getMinutes() + 15);
            }

            endTimeInput.parentNode.replaceChild(selectEndTime, endTimeInput);
            selectEndTime.id = 'reservationEnd';
        });

        // ===========================================
        // TYP URLOPU -> POKAŻ/UKRYJ GODZINY
        // ===========================================
        document.getElementById('vacationType')?.addEventListener('change', function() {
            const container = document.getElementById('timeSelectionContainer');
            container.style.display = (this.value === 'customPeriod') ? 'block' : 'none';
        });

        // ===========================================
        // ZAPIS NOWEJ REZERWACJI
        // ===========================================
        document.getElementById('saveReservation')?.addEventListener('click', async () => {
            const date = document.getElementById('reservationDate').value;
            const startTime = document.getElementById('reservationStart').value;
            
            // Sprawdź czy termin nie jest w przeszłości
            const reservationDateTime = new Date(date + 'T' + startTime);
            if (reservationDateTime < new Date()) {
                alert('Nie można dokonać rezerwacji na termin w przeszłości.');
                return;
            }

            const clientLogin = document.getElementById('clientLogin').value;
            const clientName = document.getElementById('clientName').value;
            const clientSurname = document.getElementById('clientSurname').value;
            const clientPhone = document.getElementById('clientPhone').value;
            const clientGender = document.getElementById('clientGender').value;
            const serviceId = document.getElementById('service').value;
            const reservationEnd = document.getElementById('reservationEnd').value;

            if (!clientName || !clientSurname || !clientPhone || !clientGender ||
                !serviceId || !startTime || !reservationEnd) {
                alert('Wypełnij wszystkie pola wymagane!');
                return;
            }

            try {
                const response = await fetch('/api/reservation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        date: date,
                        hour: startTime,
                        endHour: reservationEnd,
                        client: {
                            login: clientLogin || null,
                            name: clientName,
                            surname: clientSurname,
                            phone: clientPhone,
                            gender: clientGender
                        },
                        serviceId: serviceId
                    })
                });

                if (response.ok) {
                    alert('Rezerwacja zapisana.');
                    location.reload();
                } else {
                    const errorText = await response.text();
                    alert('Błąd przy tworzeniu rezerwacji: ' + errorText);
                }
            } catch (err) {
                alert('Błąd: ' + err);
            }
        });

        // ===========================================
        // ZŁOŻENIE WNIOSKU URLOP
        // ===========================================
        document.getElementById('submitVacation')?.addEventListener('click', async () => {
            const vacationType = document.getElementById('vacationType').value;
            const startDate = document.getElementById('vacationStartDate').value;
            const endDate   = document.getElementById('vacationEndDate').value;

            if (!startDate || !endDate) {
                alert('Wybierz zakres dat (od-do).');
                return;
            }

            let startTime = '08:00';
            let endTime   = '18:00';
            if (vacationType === 'customPeriod') {
                startTime = document.getElementById('startTime').value;
                endTime   = document.getElementById('endTime').value;
                if (!startTime || !endTime) {
                    alert('Wybierz godziny rozpoczęcia i zakończenia urlopu.');
                    return;
                }
            }

            try {
                const response = await fetch('?handler=VacationRequest', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        startDate: startDate,
                        endDate: endDate,
                        startTime: startTime,
                        endTime: endTime,
                        type: vacationType
                    })
                });

                const result = await response.json();
                if (!response.ok) {
                    alert('Błąd: ' + result);
                    return;
                }
                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert(result.message || 'Nieznany błąd.');
                }
            } catch (err) {
                alert('Błąd wysyłania wniosku: ' + err);
            }
        });

        // ===========================================
        // HISTORIA URLOPÓW -> AJAX ŁADOWANIE
        // ===========================================
        document.getElementById('historyModal')?.addEventListener('show.bs.modal', async () => {
            try {
                const response = await fetch('?handler=VacationHistory');
                if (response.ok) {
                    const data = await response.json();
                    const tbody = document.getElementById('vacationHistory');
                    tbody.innerHTML = '';

                    data.forEach(item => {
                        const row = `
                            <tr class="vacation-status-${item.status.toLowerCase()}">
                                <td>${new Date(item.date).toLocaleDateString()}</td>
                                <td>${item.startTime.slice(0,5)} - ${item.endTime.slice(0,5)}</td>
                                <td>${item.statusText}</td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    });
                } else {
                    console.error('Błąd pobierania historii urlopów');
                }
            } catch (err) {
                console.error('Błąd ładowania historii urlopów:', err);
            }
        });

        // ===========================================
        // PODSTAWIANIE ID REZERWACJI W MODALACH
        // ===========================================
        document.addEventListener("DOMContentLoaded", function () {
            const modalButtons = document.querySelectorAll('button[data-bs-toggle="modal"]');
            modalButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const reservationId = button.getAttribute('data-reservation-id');
                    if (reservationId) {
                        document.getElementById('deleteManageReservationId').value = reservationId;
                        document.getElementById('confirmReservationId').value       = reservationId;
                        document.getElementById('deleteReservationId').value       = reservationId;

                        const vacInput = document.getElementById('deleteVacationReservationId');
                        if (vacInput) {
                            vacInput.value = reservationId;
                        }
                    }
                });
            });
        });
    </script>
}