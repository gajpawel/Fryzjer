@page
@model Fryzjer.Pages.AbstractFactory.HairdresserScheduleFactoryModel
@{
    ViewData["Title"] = "Panel fryzjera";
    var today = DateTime.Now.Date;
}

<div class="container mt-4">
    <h1 class="text-center mb-4">Harmonogram</h1>

    <div class="text-end mb-3">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#vacationModal">
            Wniosek o urlop
        </button>
        <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#historyModal">
            Historia urlopów
        </button>
    </div>

    <div class="d-flex justify-content-between mb-3">
        <a href="?week=@(Model.CurrentWeek - 1)" class="btn btn-outline-primary">Poprzedni tydzień</a>
        <a href="?week=@(Model.CurrentWeek + 1)" class="btn btn-outline-primary">Następny tydzień</a>
    </div>

    @for (int weekIndex = 0; weekIndex < 2; weekIndex++)
    {
        var weeklySchedule = weekIndex == 0 ? Model.WeeklySchedule1 : Model.WeeklySchedule2;

        <div class="row text-center mb-5">
            @foreach (var day in weeklySchedule)
            {
                <div class="col-md-2 border bg-light mx-2 p-2">
                    <h5>@day.Date.ToString("dddd, dd-MM-yyyy")</h5>
                    <ul class="list-unstyled">
                        @if (day.Date < today)
                        {
                            <li>---</li>
                        }
                        else
                        {
                            var startTime = new TimeSpan(8, 0, 0);
                            var endTime = new TimeSpan(18, 0, 0);

                            foreach (var block in day.TimeBlocks)
                            {
                                while (startTime < block.StartTime)
                                {
                                    <li>
                                        <button class="btn btn-sm btn-success time-slot mb-2"
                                                data-hour="@($"{startTime.Hours:D2}:{startTime.Minutes:D2}")"
                                                data-date="@day.Date.ToString("yyyy-MM-dd")"
                                                data-bs-toggle="modal"
                                                data-bs-target="#reservationModal">
                                            @($"{startTime.Hours:D2}:{startTime.Minutes:D2}")
                                        </button>
                                    </li>
                                    startTime = startTime.Add(new TimeSpan(0, 15, 0));
                                }

                                <li>
                                    <button class="btn btn-sm mb-2 @(block.Modal == "#manageReservationModal" ? "btn-warning" : "btn-danger") @block.BlockClass"
                                            data-reservation-id="@block.ReservationId"
                                            data-bs-toggle="modal"
                                            data-bs-target=@block.Modal>
                                        @block.TimeRange<br />
                                        @Html.Raw(block.ClientInfo?.Replace("\n", "<br />"))<br />
                                        @block.ServiceName<br />
                                        @if (block.Modal == "#manageReservationModal" || (block.ServiceName.ToLower() == "urlop" && block.Status == 'O'))
                                        {
                                            <b>Oczekuje na akceptację</b>
                                        }
                                    </button>
                                </li>

                                startTime = block.EndTime;
                            }

                            while (startTime < endTime)
                            {
                                <li>
                                    <button class="btn btn-sm btn-success time-slot mb-2"
                                            data-hour="@($"{startTime.Hours:D2}:{startTime.Minutes:D2}")"
                                            data-date="@day.Date.ToString("yyyy-MM-dd")"
                                            data-bs-toggle="modal"
                                            data-bs-target="#reservationModal">
                                        @($"{startTime.Hours:D2}:{startTime.Minutes:D2}")
                                    </button>
                                </li>
                                startTime = startTime.Add(new TimeSpan(0, 15, 0));
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    }
</div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<!-- Modal do rezerwacji -->
<div class="modal fade" id="reservationModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rezerwacja terminu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="reservationForm">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="clientLogin" class="form-label">Login klienta</label>
                        <input type="text" class="form-control" id="clientLogin" placeholder="Opcjonalny login klienta">
                    </div>
                    <div class="mb-3">
                        <label for="clientName" class="form-label">Imię</label>
                        <input type="text" class="form-control" id="clientName" required>
                    </div>
                    <div class="mb-3">
                        <label for="clientSurname" class="form-label">Nazwisko</label>
                        <input type="text" class="form-control" id="clientSurname" required>
                    </div>
                    <div class="mb-3">
                        <label for="clientPhone" class="form-label">Numer telefonu</label>
                        <input type="text" class="form-control" id="clientPhone" required>
                    </div>
                    <div class="mb-3">
                        <label for="clientGender" class="form-label">Płeć</label>
                        <select class="form-control" id="clientGender" required>
                            <option value="M">Mężczyzna</option>
                            <option value="K">Kobieta</option>
                            <option value="N">Inne</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="service" class="form-label">Usługa</label>
                        <select class="form-control" id="service" required>
                            @foreach (var service in Model.Services.Where(s => s.Name.ToLower() != "urlop"))
                            {
                                <option value="@service.Id" data-duration="@service.Duration">
                                    @service.Name
                                </option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="reservationStart" class="form-label">Godzina rozpoczęcia</label>
                        <input type="text" class="form-control" id="reservationStart" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="reservationEnd" class="form-label">Godzina zakończenia</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="reservationEnd" readonly>
                            <button type="button" class="btn btn-secondary" id="changeEndTime">
                                Zmień
                            </button>
                        </div>
                    </div>
                    <input type="hidden" id="reservationDate">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-primary" id="saveReservation">Zarezerwuj</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal do urlopu -->
<div class="modal fade" id="vacationModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Wniosek o urlop</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="vacationForm">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="vacationType" class="form-label">Typ urlopu</label>
                        <select class="form-control" id="vacationType" required>
                            <option value="fullDay">Cały dzień</option>
                            <option value="customPeriod">Własny okres</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="vacationDate" class="form-label">Data</label>
                        <input type="date" class="form-control" id="vacationDate" required min="@DateTime.Now.ToString("yyyy-MM-dd")">
                    </div>
                    <div id="timeSelectionContainer" style="display: none;">
                        <div class="mb-3">
                            <label for="startTime" class="form-label">Od godziny</label>
                            <input type="time" class="form-control" id="startTime" min="08:00" max="17:45" step="900">
                        </div>
                        <div class="mb-3">
                            <label for="endTime" class="form-label">Do godziny</label>
                            <input type="time" class="form-control" id="endTime" min="08:15" max="18:00" step="900">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-primary" id="submitVacation">Wyślij wniosek</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal historii urlopów -->
<div class="modal fade" id="historyModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Historia urlopów</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Data</th>
                            <th>Godziny</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="vacationHistory">
                        <!-- Wypełniane dynamicznie -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal do zarządzania rezerwacją -->
<div class="modal fade" id="manageReservationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Co chcesz zrobić z rezerwacją?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Wybierz jedną z dostępnych opcji:
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Powrót</button>
                <form method="post" asp-page-handler="DeleteReservation" id="deleteReservationForm" style="display:inline;">
                    <input type="hidden" name="reservationId" id="deleteManageReservationId" />
                    <button type="submit" class="btn btn-danger">Usuń</button>
                </form>
                <form method="post" asp-page-handler="ConfirmReservation" id="confirmReservationForm" style="display:inline;">
                    <input type="hidden" name="reservationId" id="confirmReservationId" />
                    <button type="submit" class="btn btn-success">Zaakceptuj</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal do potwierdzenia anulowania rezerwacji -->
<div class="modal fade" id="deleteReservationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Potwierdź anulowanie</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Czy na pewno chcesz anulować tę rezerwację?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Nie</button>
                <form method="post" asp-page-handler="DeleteReservation" style="display:inline;">
                    <input type="hidden" name="reservationId" id="deleteReservationId" />
                    <button type="submit" class="btn btn-danger">Tak</button>
                </form>
            </div>
        </div>
    </div>
</div>
<style>
    .time-column {
        width: 100px;
        font-weight: bold;
    }

    .schedule-table td {
        padding: 5px;
        vertical-align: middle;
        height: 60px;
    }

    .reservation-info {
        font-size: 0.9em;
        text-align: center;
    }

    .vacation-o {
        background-color: #fff3cd;
    }

    .vacation-p {
        background-color: #d4edda;
    }

    .vacation-a {
        background-color: #f8d7da;
    }

    .reserved {
        background-color: #e9ecef;
    }
</style>

@section Scripts {
    <script>
        let selectedDate, selectedHour;

        // Obsługa autouzupełniania danych klienta
        document.getElementById('clientLogin')?.addEventListener('blur', async () => {
            const login = document.getElementById('clientLogin').value;
            const genderSelect = document.getElementById('clientGender');

            if (!login) {
                document.getElementById('clientName').value = '';
                document.getElementById('clientSurname').value = '';
                document.getElementById('clientPhone').value = '';
                genderSelect.value = 'M'; // wartość domyślna
                return;
            }

            try {
                const response = await fetch(`/api/client?login=${login}`);
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('clientName').value = data.name;
                    document.getElementById('clientSurname').value = data.surname;
                    document.getElementById('clientPhone').value = data.phone;
                    if (data.gender) {
                        // Upewnij się, że wartość płci jest wielką literą
                        const gender = data.gender.toUpperCase();
                        if (['M', 'K', 'N'].includes(gender)) {
                            genderSelect.value = gender;
                        }
                    }
                } else {
                    alert('Podany login nie istnieje w bazie. Wprowadź dane ręcznie lub użyj prawidłowego loginu.');
                    document.getElementById('clientLogin').value = '';
                    document.getElementById('clientName').value = '';
                    document.getElementById('clientSurname').value = '';
                    document.getElementById('clientPhone').value = '';
                    genderSelect.value = 'M'; // wartość domyślna
                }
            } catch (error) {
                console.error('Błąd podczas wyszukiwania klienta:', error);
                alert('Wystąpił błąd podczas wyszukiwania klienta. Spróbuj ponownie później.');
            }
        });

        // Obsługa wyboru terminu
        document.querySelectorAll('.time-slot').forEach(button => {
            button.addEventListener('click', function () {
                selectedDate = this.getAttribute('data-date');
                selectedHour = this.getAttribute('data-hour');

                document.getElementById('reservationDate').value = selectedDate;
                document.getElementById('reservationStart').value = selectedHour;

                const serviceSelect = document.getElementById('service');
                const reservationEnd = document.getElementById('reservationEnd');

                const updateEndTime = () => {
                    const durationString = serviceSelect.options[serviceSelect.selectedIndex].dataset.duration;
                    const [durationHours, durationMinutes] = durationString.split(':').map(Number);
                    const durationInMinutes = (durationHours * 60) + durationMinutes;

                    const [startHour, startMinute] = selectedHour.split(':').map(Number);
                    const totalMinutes = startHour * 60 + startMinute + durationInMinutes;

                    const endHour = Math.floor(totalMinutes / 60);
                    const endMinute = totalMinutes % 60;
                    reservationEnd.value = `${String(endHour).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}`;
                };

                serviceSelect.removeEventListener('change', updateEndTime);
                serviceSelect.addEventListener('change', updateEndTime);
                updateEndTime();
            });
        });

        // Obsługa przycisku zmiany godziny zakończenia
        document.getElementById('changeEndTime')?.addEventListener('click', function () {
            const endTimeInput = document.getElementById('reservationEnd');
            const currentEndTime = endTimeInput.value;
            const [hours, minutes] = currentEndTime.split(':').map(Number);

            const selectEndTime = document.createElement('select');
            selectEndTime.className = 'form-control';

            let time = new Date();
            time.setHours(hours, minutes);
            const endOfDay = new Date();
            endOfDay.setHours(18, 0);

            while (time <= endOfDay) {
                const option = document.createElement('option');
                option.value = `${time.getHours().toString().padStart(2, '0')}:${time.getMinutes().toString().padStart(2, '0')}`;
                option.text = option.value;
                if (option.value === currentEndTime) {
                    option.selected = true;
                }
                selectEndTime.appendChild(option);
                time.setMinutes(time.getMinutes() + 15);
            }

            endTimeInput.parentNode.replaceChild(selectEndTime, endTimeInput);
            selectEndTime.id = 'reservationEnd';
        });

        // Obsługa typu urlopu
        document.getElementById('vacationType').addEventListener('change', function() {
            const timeContainer = document.getElementById('timeSelectionContainer');
            timeContainer.style.display = this.value === 'customPeriod' ? 'block' : 'none';
        });

                // Modyfikacja w sekcji Scripts w pliku .cshtml

        // Obsługa wysyłania wniosku urlopowego
        document.getElementById('submitVacation').addEventListener('click', async function() {
            const vacationType = document.getElementById('vacationType').value;
            const date = document.getElementById('vacationDate').value;
            let startTime = '08:00';
            let endTime = '18:00';

            if (!date) {
                alert('Wybierz datę urlopu.');
                return;
            }

            if (vacationType === 'customPeriod') {
                startTime = document.getElementById('startTime').value;
                endTime = document.getElementById('endTime').value;

                if (!startTime || !endTime) {
                    alert('Wybierz godziny rozpoczęcia i zakończenia urlopu.');
                    return;
                }
            }

            try {
                const response = await fetch('?handler=VacationRequest', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        date: date,
                        startTime: startTime,
                        endTime: endTime,
                        type: vacationType
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    let message = result.message;
                    if (result.hasConflicts) {
                        message += "\n\nSzczegóły konfliktów:";
                        result.conflicts.forEach(conflict => {
                            message += `\n${conflict.time} - ${conflict.clientName}`;
                        });
                    }
                    alert(message);
                    location.reload();
                } else {
                    alert('Wystąpił błąd: ' + result.message);
                }
            } catch (error) {
                alert('Wystąpił błąd podczas wysyłania wniosku: ' + error);
            }
        });

        // Aktualizacja wyświetlania historii urlopów
        document.getElementById('historyModal').addEventListener('show.bs.modal', async function() {
            try {
                const response = await fetch('?handler=VacationHistory');
                if (response.ok) {
                    const history = await response.json();
                    const tbody = document.getElementById('vacationHistory');
                    tbody.innerHTML = '';

                    history.forEach(item => {
                        const row = `
                            <tr class="vacation-status-${item.status.toLowerCase()}">
                                <td>${new Date(item.date).toLocaleDateString()}</td>
                                <td>${item.startTime.slice(0, 5)} - ${item.endTime.slice(0, 5)}</td>
                                <td>${item.statusText}</td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    });
                } else {
                    console.error('Błąd podczas pobierania historii urlopów');
                }
            } catch (error) {
                console.error('Błąd podczas ładowania historii:', error);
            }
        });

       

        // Obsługa zapisu rezerwacji
        document.getElementById('saveReservation')?.addEventListener('click', async () => {
            const clientLogin = document.getElementById('clientLogin').value;
            const clientName = document.getElementById('clientName').value;
            const clientSurname = document.getElementById('clientSurname').value;
            const clientPhone = document.getElementById('clientPhone').value;
            const clientGender = document.getElementById('clientGender').value;
            const serviceId = document.getElementById('service').value;
            const reservationStart = document.getElementById('reservationStart').value;
            const reservationEnd = document.getElementById('reservationEnd').value;

            if (!clientName || !clientSurname || !clientPhone || !clientGender || !serviceId || !reservationStart || !reservationEnd) {
                alert('Wypełnij wszystkie wymagane pola!');
                return;
            }

            // Sprawdź nakładanie się terminów
            const checkOverlapResponse = await fetch(`?handler=CheckReservationOverlap&date=${selectedDate}&startTime=${reservationStart}&endTime=${reservationEnd}`);
            if (!checkOverlapResponse.ok) {
                const error = await checkOverlapResponse.text();
                alert(error);
                return;
            }

            if (clientLogin) {
                try {
                    const checkResponse = await fetch(`/api/client?login=${clientLogin}`);
                    if (!checkResponse.ok) {
                        alert('Podany login nie istnieje w bazie. Usuń login lub użyj prawidłowego.');
                        return;
                    }
                } catch (error) {
                    alert('Wystąpił błąd podczas weryfikacji loginu. Spróbuj ponownie później.');
                    return;
                }
            }

            try {
                const response = await fetch('/api/reservation', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        date: selectedDate,
                        hour: reservationStart,
                        endHour: reservationEnd,
                        client: {
                            login: clientLogin || null,
                            name: clientName,
                            surname: clientSurname,
                            phone: clientPhone,
                            gender: clientGender
                        },
                        serviceId: serviceId
                    })
                });

                if (response.ok) {
                    alert('Rezerwacja została zapisana.');
                    location.reload();
                } else {
                    const errorText = await response.text();
                    alert('Wystąpił błąd przy tworzeniu rezerwacji: ' + errorText);
                }
            } catch (error) {
                alert('Wystąpił błąd podczas tworzenia rezerwacji: ' + error);
            }
        });

        // Obsługa ID rezerwacji w modalach
        document.addEventListener("DOMContentLoaded", function () {
            const modalButtons = document.querySelectorAll('button[data-bs-toggle="modal"]');
            modalButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const reservationId = this.getAttribute('data-reservation-id');
                    if (reservationId) {
                        document.getElementById('deleteManageReservationId').value = reservationId;
                        document.getElementById('confirmReservationId').value = reservationId;
                        document.getElementById('deleteReservationId').value = reservationId;
                    }
                });
            });
        });
    </script>
}