@page
@model Fryzjer.Pages.Hairdressers.HairdresserMainPageModel
@{
    ViewData["Title"] = "Panel fryzjera";
    var today = DateTime.Now.Date;
}

<div class="container mt-4">
    <h1 class="text-center mb-4">Harmonogram</h1>

    <div class="text-end mb-3">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#vacationModal">
            Wniosek o urlop
        </button>
        <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#historyModal">
            Historia rezerwacji
        </button>
    </div>

    <div class="d-flex justify-content-between mb-3">
        <a href="?week=@(Model.CurrentWeek - 1)" class="btn btn-outline-primary">Poprzednia</a>
        <a href="?week=@(Model.CurrentWeek + 1)" class="btn btn-outline-primary">Następna</a>
    </div>

    @for (int weekIndex = 0; weekIndex < 2; weekIndex++)
    {
        var weeklySchedule = weekIndex == 0 ? Model.WeeklySchedule1 : Model.WeeklySchedule2;

        <div class="row text-center mb-5">
            @foreach (var day in weeklySchedule)
            {
                <div class="col-md-2 border bg-light mx-2 p-2">
                    <h5>@day.Date.ToString("dddd, dd-MM-yyyy")</h5>
                    <ul class="list-unstyled">
                        @if (day.Date < today)
                        {
                            <li>---</li>
                        }
                        else
                        {
                            var startTime = new TimeSpan(8, 0, 0);
                            var endTime = new TimeSpan(18, 0, 0);

                            foreach (var block in day.TimeBlocks)
                            {
                                while (startTime < block.StartTime)
                                {
                                    <li>
                                        <button class="btn btn-sm btn-success time-slot mb-2"
                                                data-hour="@HairdresserMainPageModel.FormatTime(startTime)"
                                                data-date="@day.Date.ToString("yyyy-MM-dd")"
                                                data-bs-toggle="modal"
                                                data-bs-target="#reservationModal">
                                            @HairdresserMainPageModel.FormatTime(startTime)
                                        </button>
                                    </li>
                                    startTime = startTime.Add(new TimeSpan(0, 15, 0));
                                }

                                <li>
                                    <button class="btn btn-sm mb-2 @(block.Modal == "#manageReservationModal" ? "btn-warning" : "btn-danger") reserved-time-slot"
                                            data-reservation-id="@block.ReservationId"
                                            data-bs-toggle="modal"
                                            data-bs-target=@block.Modal>
                                        @block.TimeRange<br />
                                        @Html.Raw(block.ClientInfo.Replace("\n", "<br />"))<br />
                                        @block.ServiceName<br />
                                        @if (block.Modal == "#manageReservationModal" || (block.ServiceName == "urlop" && block.Status == 'O'))
                                        {
                                            <b>Oczekuje na akceptację</b>
                                        }
                                    </button>
                                </li>

                                startTime = block.EndTime;
                            }

                            while (startTime < endTime)
                            {
                                <li>
                                    <button class="btn btn-sm btn-success time-slot mb-2"
                                            data-hour="@HairdresserMainPageModel.FormatTime(startTime)"
                                            data-date="@day.Date.ToString("yyyy-MM-dd")"
                                            data-bs-toggle="modal"
                                            data-bs-target="#reservationModal">
                                        @HairdresserMainPageModel.FormatTime(startTime)
                                    </button>
                                </li>
                                startTime = startTime.Add(new TimeSpan(0, 15, 0));
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    }
</div>


<!-- Modal do rezerwacji -->
<div class="modal fade" id="reservationModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rezerwacja godziny</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="reservationForm">
                    <div class="mb-3">
                        <label for="clientLogin" class="form-label">Login klienta</label>
                        <input type="text" class="form-control" id="clientLogin" placeholder="Opcjonalny login klienta">
                    </div>
                    <div class="mb-3">
                        <label for="clientName" class="form-label">Imię</label>
                        <input type="text" class="form-control" id="clientName" required>
                    </div>
                    <div class="mb-3">
                        <label for="clientSurname" class="form-label">Nazwisko</label>
                        <input type="text" class="form-control" id="clientSurname" required>
                    </div>
                    <div class="mb-3">
                        <label for="clientPhone" class="form-label">Numer telefonu</label>
                        <input type="text" class="form-control" id="clientPhone" required>
                    </div>
                    <div class="mb-3">
                        <label for="clientGender" class="form-label">Płeć</label>
                        <select class="form-control" id="clientGender" required>
                            <option value="M">Mężczyzna</option>
                            <option value="K">Kobieta</option>
                            <option value="N">Inne</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="service" class="form-label">Usługa</label>
                        <select class="form-control" id="service" required>
                            @foreach (var service in Model.Services.Where(s => s.Name.ToLower() != "urlop"))
                            {
                                <option value="@service.Id" data-duration="@service.Duration">
                                    @service.Name
                                </option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="reservationStart" class="form-label">Godzina rozpoczęcia</label>
                        <input type="text" class="form-control" id="reservationStart" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="reservationEnd" class="form-label">Godzina zakończenia</label>
                        <input type="text" class="form-control" id="reservationEnd" readonly>
                    </div>
                    <input type="hidden" id="reservationDate">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-primary" id="saveReservation">Zarezerwuj</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal do zarządzania rezerwacją -->
<div class="modal fade" id="manageReservationModal" tabindex="-1" aria-labelledby="manageReservationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="manageReservationModalLabel">Co chcesz zrobić z rezerwacją?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Wybierz jedną z dostępnych opcji:
            </div>
            <div class="modal-footer">
                <!-- Powrót -->
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Powrót</button>
                <!-- Usuń -->
                <form method="post" asp-page-handler="DeleteReservation" id="deleteReservationForm" style="display:inline;">
                    <input type="hidden" name="reservationId" id="deleteManageReservationId" />
                    <button type="submit" class="btn btn-danger">Usuń</button>
                </form>
                <!-- Zaakceptuj -->
                <form method="post" asp-page-handler="ConfirmReservation" id="confirmReservationForm" style="display:inline;">
                    <input type="hidden" name="reservationId" id="confirmReservationId" />
                    <button type="submit" class="btn btn-success">Zaakceptuj</button>
                </form>
            </div>
        </div>
    </div>
</div>



<!-- Modal do potwierdzenia anulowania rezerwacji -->
<div class="modal fade" id="deleteReservationModal" tabindex="-1" aria-labelledby="deleteReservationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteReservationModalLabel">Potwierdź anulowanie</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Czy na pewno chcesz anulować tę rezerwację?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Nie</button>
                    <!-- Formularz do anulowania rezerwacji -->
                    <form method="post" asp-page-handler="DeleteReservation" id="deleteReservationForm" style="display:inline;">
                        <input type="hidden" name="reservationId" id="deleteReservationId" />
                        <button type="submit" class="btn btn-danger">Tak</button>
                    </form>
                </div>
            </div>
        </div>
</div>
    <script>
        // Skrypt do ustawienia ID rezerwacji w formularzu
    document.addEventListener("DOMContentLoaded", function () {
        const modalButtons = document.querySelectorAll('button[data-bs-toggle="modal"]');

        modalButtons.forEach(button => {
            button.addEventListener('click', function () {
                // Pobranie ID rezerwacji z atrybutu data-reservation-id
                const reservationId = this.getAttribute('data-reservation-id');
                // Ustawienie ID w polach formularzy
                document.getElementById('deleteManageReservationId').value = reservationId;
                document.getElementById('confirmReservationId').value = reservationId;
                document.getElementById('deleteReservationId').value = reservationId;
            });
        });
    });

    </script>

<!-- Historia rezerwacji Modal -->
<div class="modal fade" id="historyModal" tabindex="-1" aria-labelledby="historyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="historyModalLabel">Historia</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Zakładki -->
                <ul class="nav nav-tabs mb-3" id="historyTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="reservations-tab" data-bs-toggle="tab"
                                data-bs-target="#reservations" type="button" role="tab">
                            Rezerwacje
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="vacation-tab" data-bs-toggle="tab"
                                data-bs-target="#vacation" type="button" role="tab">
                            Wnioski urlopowe
                        </button>
                    </li>
                </ul>

                <!-- Zawartość zakładek -->
                <div class="tab-content" id="historyTabContent">
                    <!-- Zakładka rezerwacji -->
                    <div class="tab-pane fade show active" id="reservations" role="tabpanel">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Data</th>
                                    <th>Imię i nazwisko klienta</th>
                                    <th>Usługa</th>
                                    <th>Godzina</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody id="reservationsTableBody">
                                <!-- Dane rezerwacji będą wstawiane przez JavaScript -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Zakładka urlopów -->
                    <div class="tab-pane fade" id="vacation" role="tabpanel">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Data</th>
                                    <th>Godziny</th>
                                    <th>Status</th>
                                    <th>Komentarz</th>
                                </tr>
                            </thead>
                            <tbody id="vacationTableBody">
                                <!-- Dane urlopów będą wstawiane przez JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Funkcja do ładowania historii rezerwacji
        async function loadReservationsHistory() {
            try {
                const response = await fetch('/api/reservation/history');
                if (response.ok) {
                    const data = await response.json();
                    const tbody = document.getElementById('reservationsTableBody');
                    tbody.innerHTML = '';

                    data.forEach(reservation => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${new Date(reservation.date).toLocaleDateString()}</td>
                            <td>${reservation.clientName} ${reservation.clientSurname}</td>
                            <td>${reservation.serviceName}</td>
                            <td>${reservation.startTime} - ${reservation.endTime}</td>
                            <td>${getReservationStatus(reservation.status)}</td>
                        `;
                        tbody.appendChild(row);
                    });
                }
            } catch (error) {
                console.error('Błąd podczas ładowania historii rezerwacji:', error);
            }
        }

        // Funkcja do ładowania historii urlopów
        async function loadVacationHistory() {
            try {
                const response = await fetch('/api/vacation/history');
                if (response.ok) {
                    const data = await response.json();
                    const tbody = document.getElementById('vacationTableBody');
                    tbody.innerHTML = '';

                    data.forEach(vacation => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${new Date(vacation.date).toLocaleDateString()}</td>
                            <td>${vacation.startTime} - ${vacation.endTime}</td>
                            <td>${getVacationStatus(vacation.status)}</td>
                            <td>${vacation.comment || '-'}</td>
                        `;
                        tbody.appendChild(row);
                    });
                }
            } catch (error) {
                console.error('Błąd podczas ładowania historii urlopów:', error);
            }
        }

        // Funkcja pomocnicza do wyświetlania statusu rezerwacji
        function getReservationStatus(status) {
            const statusMap = {
                'P': '<span class="badge bg-success">Potwierdzona</span>',
                'O': '<span class="badge bg-warning">Oczekująca</span>',
                'A': '<span class="badge bg-danger">Anulowana</span>'
            };
            return statusMap[status] || status;
        }

        // Funkcja pomocnicza do wyświetlania statusu urlopu
        function getVacationStatus(status) {
            const statusMap = {
                'P': '<span class="badge bg-success">Zatwierdzony</span>',
                'O': '<span class="badge bg-warning">Oczekuje</span>',
                'A': '<span class="badge bg-danger">Odrzucony</span>'
            };
            return statusMap[status] || status;
        }

        // Ładowanie danych przy otwieraniu modalu
        document.getElementById('historyModal').addEventListener('show.bs.modal', function () {
            loadReservationsHistory();
            loadVacationHistory();
        });

        // Odświeżanie danych przy zmianie zakładki
        document.querySelectorAll('button[data-bs-toggle="tab"]').forEach(button => {
            button.addEventListener('shown.bs.tab', function (event) {
                if (event.target.id === 'reservations-tab') {
                    loadReservationsHistory();
                } else if (event.target.id === 'vacation-tab') {
                    loadVacationHistory();
                }
            });
        });
    });
</script>


<!-- Modal do wniosku urlopowego -->
<div class="modal fade" id="vacationModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Złóż wniosek o urlop</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="vacationForm">
                    <div class="mb-3">
                        <label for="vacationDate" class="form-label">Data urlopu</label>
                        <input type="date" class="form-control" id="vacationDate" required
                               min="@DateTime.Now.ToString("yyyy-MM-dd")">
                    </div>
                    <div class="mb-3">
                        <label for="vacationStartTime" class="form-label">Od godziny</label>
                        <select class="form-control" id="vacationStartTime" required>
                            <option value="">Wybierz godzinę</option>
                            @{
                                var time = TimeSpan.FromHours(8);
                                while (time < TimeSpan.FromHours(18))
                                {
                                    <option value="@HairdresserMainPageModel.FormatTime(time)">@HairdresserMainPageModel.FormatTime(time)</option>
                                    time = time.Add(TimeSpan.FromMinutes(15));
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="vacationEndTime" class="form-label">Do godziny</label>
                        <select class="form-control" id="vacationEndTime" required>
                            <option value="">Wybierz godzinę</option>
                            @{
                                time = TimeSpan.FromHours(8);
                                while (time <= TimeSpan.FromHours(18))
                                {
                                    <option value="@HairdresserMainPageModel.FormatTime(time)">@HairdresserMainPageModel.FormatTime(time)</option>
                                    time = time.Add(TimeSpan.FromMinutes(15));
                                }
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                <button type="button" class="btn btn-primary" id="submitVacation">Złóż wniosek</button>
            </div>
        </div>
    </div>
</div>


<script>
    let selectedDate, selectedHour, selectedReservationId;

    document.querySelectorAll('.time-slot').forEach(button => {
        button.addEventListener('click', function () {
            selectedDate = this.getAttribute('data-date');
            selectedHour = this.getAttribute('data-hour');

            document.getElementById('reservationDate').value = selectedDate;
            document.getElementById('reservationStart').value = selectedHour;

            const serviceSelect = document.getElementById('service');
            const reservationEnd = document.getElementById('reservationEnd');

            const updateEndTime = () => {
                const duration = parseInt(serviceSelect.options[serviceSelect.selectedIndex].dataset.duration);
                const [startHour, startMinute] = selectedHour.split(':').map(Number);
                const totalMinutes = startHour * 60 + startMinute + duration;
                const endHour = Math.floor(totalMinutes / 60);
                const endMinute = totalMinutes % 60;
                reservationEnd.value = `${String(endHour).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}`;
            };

            serviceSelect.removeEventListener('change', updateEndTime);
            serviceSelect.addEventListener('change', updateEndTime);
            updateEndTime();
        });
    });

    document.getElementById('vacationStartTime').addEventListener('change', function () {
        const startTime = this.value;
        const endTimeSelect = document.getElementById('vacationEndTime');
        const endTimeOptions = endTimeSelect.options;

        for (let i = 0; i < endTimeOptions.length; i++) {
            endTimeOptions[i].disabled = endTimeOptions[i].value <= startTime && endTimeOptions[i].value !== "";
        }

        if (endTimeSelect.value <= startTime) {
            endTimeSelect.value = "";
        }
    });

    document.getElementById('submitVacation').addEventListener('click', async () => {
        const date = document.getElementById('vacationDate').value;
        const startTime = document.getElementById('vacationStartTime').value;
        const endTime = document.getElementById('vacationEndTime').value;

        if (!date || !startTime || !endTime) {
            alert('Wypełnij wszystkie pola!');
            return;
        }

        // Pobierz ID usługi "urlop"
        const vacationServiceId = @Model.Services.First(s => s.Name.ToLower() == "urlop").Id;

        console.log('Wysyłane dane:', {
            date: date,
            hour: startTime,
            endHour: endTime,
            serviceId: vacationServiceId
        });

        try {
            const response = await fetch('/api/reservation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    date: date,
                    hour: startTime,
                    endHour: endTime,
                    client: null,
                    serviceId: vacationServiceId
                })
            });

            const responseText = await response.text();
            console.log('Odpowiedź serwera:', response.status, responseText);

            if (response.ok) {
                alert('Wniosek o urlop został złożony.');
                location.reload();
            } else {
                alert('Wystąpił błąd: ' + responseText);
            }
        } catch (error) {
            console.error('Błąd:', error);
            alert('Wystąpił błąd podczas składania wniosku o urlop: ' + error);
        }
    });

    document.getElementById('clientLogin').addEventListener('blur', async () => {
        const login = document.getElementById('clientLogin').value;
        if (!login) return;

        try {
            const response = await fetch(`/api/client?login=${login}`);
            if (response.ok) {
                const data = await response.json();
                document.getElementById('clientName').value = data.name;
                document.getElementById('clientSurname').value = data.surname;
                document.getElementById('clientPhone').value = data.phone;
                document.getElementById('clientGender').value = data.gender;
            } else {
                console.log('Klient nie został znaleziony');
                document.getElementById('clientName').value = '';
                document.getElementById('clientSurname').value = '';
                document.getElementById('clientPhone').value = '';
            }
        } catch (error) {
            console.error('Błąd podczas wyszukiwania klienta:', error);
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('.reserved-time-slot').forEach(button => {
            button.addEventListener('click', function () {
                selectedReservationId = this.getAttribute('data-reservation-id');
            });
        });
    });

    document.getElementById('saveReservation').addEventListener('click', async () => {
        const clientLogin = document.getElementById('clientLogin').value;
        const clientName = document.getElementById('clientName').value;
        const clientSurname = document.getElementById('clientSurname').value;
        const clientPhone = document.getElementById('clientPhone').value;
        const clientGender = document.getElementById('clientGender').value;
        const serviceId = document.getElementById('service').value;
        const reservationStart = document.getElementById('reservationStart').value;
        const reservationEnd = document.getElementById('reservationEnd').value;

        if (!clientName || !clientSurname || !clientPhone || !clientGender || !serviceId || !reservationStart || !reservationEnd) {
            alert('Wypełnij wszystkie wymagane pola!');
            return;
        }

        try {
            const response = await fetch('/api/reservation', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    date: selectedDate,
                    hour: reservationStart,
                    endHour: reservationEnd,
                    client: {
                        login: clientLogin || null,
                        name: clientName,
                        surname: clientSurname,
                        phone: clientPhone,
                        gender: clientGender
                    },
                    serviceId: serviceId
                })
            });

            if (response.ok) {
                alert('Rezerwacja została zapisana.');
                location.reload();
            } else {
                const errorText = await response.text();
                alert('Wystąpił błąd przy tworzeniu rezerwacji: ' + errorText);
            }
        } catch (error) {
            alert('Wystąpił błąd podczas tworzenia rezerwacji: ' + error);
        }
    });


</script>